AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Accounts Service - Pure Lambda Handlers'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
  
  DatabasePassword:
    Type: String
    NoEcho: true
    Default: dev123456
  
  JWTSecret:
    Type: String
    NoEcho: true
    Default: your-jwt-secret-key

  DatabaseUrlParameter:
    Type: AWS::SSM::Parameter::Value<String>    # ou <SecureString>
    Default: /secret/database_url

Globals:
  Function:
    Runtime: python3.13
    Timeout: 30
    MemorySize: 512
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        LOG_LEVEL: INFO
        JWT_SECRET: !Ref JWTSecret
        JWT_ALGORITHM: HS256
        DATABASE_URL: !Ref DatabaseUrlParameter
    Tags:
      Service: identidade   # aplica a tag em todas as Lambdas
    VpcConfig:
      SecurityGroupIds:
        - sg-0023175edfd49ca18
      SubnetIds:
        - subnet-0f12951fa6cccef8e #privada
        - subnet-0d9dc74d2a9c8c4f6 #privada


Resources:

  # 1) Autorizer Lambda
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src.handlers.authorizer.lambda_handler
      CodeUri: .
      Policies:
        - AWSLambdaBasicExecutionRole
      Tags:
        Service: identidade

  # 2) API Gateway explícito para podermos ter DefaultAuthorizer
  AccountsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: LambdaAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          LambdaAuthorizer:
            FunctionArn: !GetAtt AuthFunction.Arn
            Identity:
              Header: Authorization
      Tags:
        Service: identidade

  # 3) Todas as suas funções apontando para este API
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src.handlers.auth_handler.login_handler
      Description: User login
      Events:
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref AccountsApi
            Path: /api/v1/auth/login
            Method: POST
            Auth:
              Authorizer: NONE

  ChangePasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src.handlers.auth_handler.change_password_handler
      Description: Change user password
      Events:
        ChangePassword:
          Type: Api
          Properties:
            RestApiId: !Ref AccountsApi
            Path: /api/v1/auth/change-password
            Method: POST

  GetCurrentUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src.handlers.auth_handler.get_current_user_handler
      Description: Get current user info
      Events:
        GetCurrentUser:
          Type: Api
          Properties:
            RestApiId: !Ref AccountsApi
            Path: /api/v1/auth/me
            Method: GET

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src.handlers.user_handler.create_user_handler
      Description: Create new user
      Events:
        CreateUser:
          Type: Api
          Properties:
            RestApiId: !Ref AccountsApi
            Path: /api/v1/users
            Method: POST
            Auth:
              Authorizer: NONE

  GetUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src.handlers.user_handler.get_users_handler
      Description: Get users with pagination
      Events:
        GetUsers:
          Type: Api
          Properties:
            RestApiId: !Ref AccountsApi
            Path: /api/v1/users
            Method: GET

  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src.handlers.user_handler.get_user_handler
      Description: Get user by ID
      Events:
        GetUser:
          Type: Api
          Properties:
            RestApiId: !Ref AccountsApi
            Path: /api/v1/users/{user_id}
            Method: GET

  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src.handlers.user_handler.update_user_handler
      Description: Update user
      Events:
        UpdateUser:
          Type: Api
          Properties:
            RestApiId: !Ref AccountsApi
            Path: /api/v1/users/{user_id}
            Method: PUT

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src.handlers.user_handler.delete_user_handler
      Description: Delete user
      Events:
        DeleteUser:
          Type: Api
          Properties:
            RestApiId: !Ref AccountsApi
            Path: /api/v1/users/{user_id}
            Method: DELETE

  # 4) HealthCheck como público (override para NONE)
  HealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src.handlers.health_handler.health_check_handler
      Description: Health check
      Events:
        HealthCheck:
          Type: Api
          Properties:
            RestApiId: !Ref AccountsApi
            Path: /api/v1/health
            Method: GET
            Auth:
              Authorizer: NONE

Outputs:
  AccountsApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${AccountsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Export:
      Name: "accounts-api-url"

  AuthFunctionArn:
    Description: "Lambda ARN do authorizer"
    Value: !GetAtt AuthFunction.Arn
    Export:
      Name: "AuthFunctionArn"
